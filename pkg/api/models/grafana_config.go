// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GrafanaConfig grafana config
// swagger:model GrafanaConfig
type GrafanaConfig struct {

	// admin password
	AdminPassword string `json:"adminPassword,omitempty" yaml:"adminPassword"`

	// admin user
	AdminUser string `json:"adminUser,omitempty" yaml:"adminUser"`

	// anonymous
	Anonymous bool `json:"anonymous,omitempty" yaml:"anonymous"`

	// auth proxy
	AuthProxy *GrafanaConfigAuthProxy `json:"authProxy,omitempty"`

	// auto assign org
	AutoAssignOrg bool `json:"autoAssignOrg,omitempty" yaml:"autoAssignOrg"`

	// auto assign org role
	AutoAssignOrgRole string `json:"autoAssignOrgRole,omitempty" yaml:"autoAssignOrgRole"`

	// basic auth
	BasicAuth bool `json:"basicAuth,omitempty" yaml:"basicAuth"`

	// disable login form
	DisableLoginForm bool `json:"disableLoginForm,omitempty" yaml:"disableLoginForm"`

	// disable signout menu
	DisableSignoutMenu bool `json:"disableSignoutMenu,omitempty" yaml:"disableSignoutMenu"`

	// grafana group role map
	GrafanaGroupRoleMap string `json:"grafanaGroupRoleMap,omitempty" yaml:"grafanaGroupRoleMap"`

	// ingress host
	IngressHost string `json:"ingressHost,omitempty" yaml:"hostname"`

	// log level
	LogLevel string `json:"logLevel,omitempty" yaml:"logLevel"`

	// org name
	OrgName string `json:"orgName,omitempty" yaml:"orgName"`
}

// Validate validates this grafana config
func (m *GrafanaConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthProxy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GrafanaConfig) validateAuthProxy(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthProxy) { // not required
		return nil
	}

	if m.AuthProxy != nil {
		if err := m.AuthProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authProxy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GrafanaConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GrafanaConfig) UnmarshalBinary(b []byte) error {
	var res GrafanaConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
