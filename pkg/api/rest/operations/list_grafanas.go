// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/integr8ly/grafana-operator/pkg/api/models"
)

// ListGrafanasHandlerFunc turns a function with the right signature into a list grafanas handler
type ListGrafanasHandlerFunc func(ListGrafanasParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ListGrafanasHandlerFunc) Handle(params ListGrafanasParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ListGrafanasHandler interface for that can handle valid list grafanas params
type ListGrafanasHandler interface {
	Handle(ListGrafanasParams, *models.Principal) middleware.Responder
}

// NewListGrafanas creates a new http.Handler for the list grafanas operation
func NewListGrafanas(ctx *middleware.Context, handler ListGrafanasHandler) *ListGrafanas {
	return &ListGrafanas{Context: ctx, Handler: handler}
}

/*ListGrafanas swagger:route GET /api/v1/grafana/{namespace} listGrafanas

List available Grafanas by Namespace

*/
type ListGrafanas struct {
	Context *middleware.Context
	Handler ListGrafanasHandler
}

func (o *ListGrafanas) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListGrafanasParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
