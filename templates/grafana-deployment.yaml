apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: {{ .GrafanaDeploymentName }}
  namespace: {{ .Namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: grafana
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: grafana
      name: grafana
    spec:
      initContainers:
        - env:
            - name: GRAFANA_PLUGINS
              value: ""
          image: 'quay.io/integreatly/grafana_plugins_init:{{ .PluginsInitContainerImageTag }}'
          imagePullPolicy: IfNotPresent
          name: grafana-plugins-init
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /opt/plugins
              name: grafana-plugins
      containers:
        - args:
          - '-provider=openshift'
          - '-https-address=:9091'
          - '-http-address='
          - '-email-domain=*'
          - '-upstream=http://localhost:3000'
          - '-openshift-sar={"resource": "namespaces", "verb": "get"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get"}}'
          - '-tls-cert=/etc/tls/private/tls.crt'
          - '-tls-key=/etc/tls/private/tls.key'
          - '-client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token'
          - '-cookie-secret-file=/etc/proxy/secrets/session_secret'
          - '-openshift-service-account={{ .GrafanaServiceAccountName }}'
          - '-openshift-ca=/etc/pki/tls/cert.pem'
          - '-openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
          - '-skip-auth-regex=^/metrics'
          image: 'registry.redhat.io/openshift3/oauth-proxy:v3.11.43'
          name: grafana-proxy
          ports:
            - containerPort: 9091
              name: gproxy
          resources: {}
          volumeMounts:
            - mountPath: /etc/tls/private
              name: secret-grafana-k8s-tls
              readOnly: false
            - mountPath: /etc/proxy/secrets
              name: secret-grafana-k8s-proxy
              readOnly: false
        - image: '{{ .GrafanaImage }}:{{ .GrafanaVersion }}'
          args:
            - -config=/etc/grafana/grafana.ini
          imagePullPolicy: IfNotPresent
          name: grafana
          ports:
            - containerPort: 3000
              name: grafana-http
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/grafana/provisioning/dashboards
              name: {{ .GrafanaProvidersConfigMapName }}
            - mountPath: /etc/grafana/provisioning/datasources
              name: {{ .GrafanaDatasourcesConfigMapName }}
            - mountPath: /etc/grafana-dashboards
              name: {{ .GrafanaDashboardsConfigMapName }}
            - mountPath: /var/lib/grafana
              name: grafana-data
            - mountPath: /var/log/grafana
              name: grafana-logs
            - mountPath: /etc/grafana/
              name: {{ .GrafanaConfigMapName }}
            - mountPath: /var/lib/grafana/plugins
              name: grafana-plugins
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: {{ .GrafanaServiceAccountName}}
      serviceAccountName: {{ .GrafanaServiceAccountName }}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: secret-grafana-k8s-tls
          secret:
            secretName: grafana-k8s-tls
        - name: secret-grafana-k8s-proxy
          secret:
            secretName: grafana-k8s-proxy
        - configMap:
            name: {{ .GrafanaProvidersConfigMapName}}
          name: {{ .GrafanaProvidersConfigMapName }}
        - configMap:
            name: {{ .GrafanaDatasourcesConfigMapName }}
          name: {{ .GrafanaDatasourcesConfigMapName }}
        - configMap:
            name: {{ .GrafanaDashboardsConfigMapName }}
          name: {{ .GrafanaDashboardsConfigMapName }}
        - configMap:
            name: {{ .GrafanaConfigMapName }}
          name: {{ .GrafanaConfigMapName }}
        - emptyDir: {}
          name: grafana-data
        - emptyDir: {}
          name: grafana-logs
        - emptyDir: {}
          name: grafana-plugins
